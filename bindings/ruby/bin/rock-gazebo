#! /usr/bin/env ruby

require 'optparse'
require 'rock/gazebo'

NO_GUI=%w{off no}
GUI_MODES=%w{vizkit gzclient}
Rock::Gazebo.logger.level = Logger::INFO
download_only = false
update_models = false

gui = 'vizkit'
gzserver_args = Array.new
start = false
options = OptionParser.new do |opt|
    opt.banner = "rock-gazebo SCENE"
    opt.on '--start', 'controls in vizkit3d visualization mode if rock-gazebo should configure and start the ModelTask components to ensure the visualization gets updated' do
        start = true
    end
    opt.on '--gui=MODE', String, "controls the GUI that is used.", "'vizkit' (the default) uses Vizkit3D,", "'gzclient' uses Gazebo\'s visualization and", "'no' disables visualization altogether" do |gui_mode|
        if NO_GUI.include?(gui_mode)
            gui = false
        elsif GUI_MODES.include?(gui_mode)
            gui = gui_mode
        else
            STDERR.puts "'#{gui_mode}' is not a valide GUI mode, use one of #{GUI_MODES.join(", ")}. To disable the GUI altogether, pass one of the following: #{NO_GUI.join(", ")} "
            exit 1
        end
    end
    opt.on '--download-only', 'download missing models and exit' do
        download_only = true
    end
    opt.on '--update-models', 'attempt to update already-present models. It updates all already-downloaded models, not only the ones that the world file refers to' do
        update_models = true
    end
    opt.on '--verbose', 'run gzserver in verbose mode' do
        gzserver_args << '--verbose'
        Rock::Gazebo.logger.level = Logger::DEBUG
    end
    opt.on '--pause', 'run gzserver in paused state' do
        gzserver_args << '--pause'
        Rock::Gazebo.logger.level = Logger::DEBUG
    end
end

args = options.parse(ARGV)
if args.size != 1
    if update_models
        Rock::Gazebo.update_existing_models
        exit 0
    else
        STDERR.puts "Scene argument missing"
        puts options
        exit 1
    end
end

require 'rock/bundles'
# Workaround: default_loader calls Orocos.load unconditionally :(
Orocos.disable_sigchld_handler = true
Bundles.load
SDF::XML.model_path = Rock::Gazebo.model_path

_, args = Rock::Gazebo.resolve_worldfiles_and_models_arguments(args)
scene = args.first

if update_models
    Rock::Gazebo.update_existing_models
end

Rock::Gazebo.download_missing_models(scene)
exit(0) if download_only

if gui == 'vizkit'
    require 'Qt'
    require 'vizkit'
    require 'rock_gazebo/viz'
end

subprocesses = Hash.new
begin
    gazebo_pid = Rock::Gazebo.spawn('gzserver', scene, *gzserver_args)
    subprocesses[gazebo_pid] = 'gzserver'
    if gui == 'vizkit'
        RockGazebo.viz(scene, start: start)
        timer = Qt::Timer.new
        timer.connect(SIGNAL('timeout()')) do
            if terminated_pid = Process.waitpid(-1, Process::WNOHANG)
                puts "#{subprocesses[terminated_pid]} finished (#{terminated_pid})"
                $qApp.quit
            end
        end
        timer.start(2000)
        Vizkit.exec
    elsif gui == 'gzclient'
        gzclient_pid = Rock::Gazebo.spawn('gzclient')
        subprocesses[gzclient_pid] = 'gzclient'
        terminated_pid = Process.waitpid
        puts "#{subprocesses[terminated_pid]} finished (#{terminated_pid})"
    else
        STDERR.puts "Press CTRL+C to quit"
        sleep
    end
ensure
    pids = subprocesses.find_all do |pid, name|
        next if pid == terminated_pid
        begin
            Process.kill('TERM', pid)
            puts "Terminating #{name} (#{pid})"
            true
        rescue Errno::ESRCH, Errno::ECHILD
        end
    end
    pids.each do |pid, name|
        puts "Waiting for #{name} (#{pid}) to terminate"
        begin Process.waitpid(pid)
        rescue Errno::ESRCH, Errno::ECHILD
        end
    end
end

